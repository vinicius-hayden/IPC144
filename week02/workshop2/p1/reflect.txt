///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #2 (P2)
Full Name  : Vinicius Hayden Souza da Silva
Student ID#:  135067221
Email      : vhsouza-da-silva@myseneca.ca
Section    : NCC

Authenticity Declaration:

I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. The main reason why price1 and the converted cent value does not represented the expected value is because floating points numbers in computers have limitations when it comes to precision and number accuracy. Not all decimal numbers can be the exact value in binary, since float and boule types are implemented using the binary representation. This would also explain why in other cases the expected value is corresponded.

2. Because they use implicit type promotion and type conversion, these three examples work as expected. To make sure that  the floating-point arithmetic is accurate, the integer money in the first example is implicitly promoted to a double before division. In the second illustration, the integer constant 100 is explicitly converted to a double to allow for proper division. In the third example, the total sum of money is converted to a double before being divided using explicit conversion. In all cases, the division is performed into compatible types and the output is correctly formatted and printed. The code's action is ensured through type promotion, coercion, and explicit casting.

3. 
a) The variable result value is 72, because in the expression 72/100 is an integer division thus the decimal portion is truncated. Even though the variable money value is 7245, it is divided by 100 so the integer division would be equal to 72, being this number assigned to the variable result.

b) 1. $72.00
    2. $72
    3. $72.00
    4. $72

c) Since both are using format specifiers %.2lf, in the division money/100, the integer value is implicitly converted to double, so the result ends up having decimal places .00 even though the actual result would be an integer.